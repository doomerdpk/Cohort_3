1. Rolling up the state:

import { useState } from "react";

function App() {
  return (
    <>
      <Counter />
    </>
  );
}

function Counter() {
  const [count, setCount] = useState(0);

  return (
    <div>
      <Count count={count} />
      <br />
      <IncreaseCount setCount={setCount} />
      <br />
      <DecreaseCount setCount={setCount} />
    </div>
  );
}

function Count({ count }) {
  return <div>{count}</div>;
}

function IncreaseCount({ setCount }) {
  return (
    <div>
      <button onClick={() => setCount((c) => c + 1)}>IncreaseCount</button>
    </div>
  );
}

function DecreaseCount({ setCount }) {
  return (
    <div>
      <button onClick={() => setCount((c) => c - 1)}>DecreaseCount</button>
    </div>
  );
}

export default App;


2. using Context API:

import { useState, createContext, useContext } from "react";

const CountContext = createContext();

function App() {
  const [count, setCount] = useState(0);
  return (
    <>
      <CountContext.Provider
        value={{
          count: count,
          setCount: setCount,
        }}
      >
        <Counter />
      </CountContext.Provider>
    </>
  );
}

function Counter() {
  return (
    <div>
      <Count />
      <br />
      <IncreaseCount />
      <br />
      <DecreaseCount />
    </div>
  );
}

function Count() {
  const { count } = useContext(CountContext);
  return <div>{count}</div>;
}

function IncreaseCount() {
  const { setCount } = useContext(CountContext);
  return (
    <div>
      <button onClick={() => setCount((c) => c + 1)}>IncreaseCount</button>
    </div>
  );
}

function DecreaseCount() {
  const { setCount } = useContext(CountContext);
  return (
    <div>
      <button onClick={() => setCount((c) => c - 1)}>DecreaseCount</button>
    </div>
  );
}

export default App;


4. Using Recoil:

import { useState, createContext, useContext } from "react";
import { RecoilRoot, atom, useRecoilValue, useSetRecoilState } from "recoil";

//Global Atom Variable to maintain the state
const counter = atom({
  key: "counter",
  default: 0,
});

function App() {
  return (
    //Wrapped under RecoilRoot
    <>
      <RecoilRoot>
        <Counter />
      </RecoilRoot>
    </>
  );
}

function Counter() {
  return (
    <div>
      <Count />
      <br />
      <IncreaseCount />
      <br />
      <DecreaseCount />
    </div>
  );
}

function Count() {
  //Used "useRecoilValue" function to get the value of the state variable.
  const count = useRecoilValue(counter);
  return <div>{count}</div>;
}

function IncreaseCount() {
  //Used "useRecoilState" function to get the updater function
  const setCount = useSetRecoilState(counter);
  return (
    <div>
      <button onClick={() => setCount((c) => c + 1)}>IncreaseCount</button>
    </div>
  );
}

function DecreaseCount() {
  //Used "useRecoilState" function to get the updater function
  const setCount = useSetRecoilState(counter);
  return (
    <div>
      <button onClick={() => setCount((c) => c - 1)}>DecreaseCount</button>
    </div>
  );
}

export default App;


4. Using Memo:


import { useEffect, useState } from "react";
import { memo } from "react";

function App() {
  return (
    <>
      <Counter />
    </>
  );
}

function Counter() {
  const [count, setCount] = useState(0);

  useEffect(() => {
    setInterval(function () {
      setCount((c) => c + 1);
    }, 3000);
  }, []);

  return (
    <div>
      <Count />
      <br />
      <IncreaseCount setCount={setCount} />
      <br />
      <DecreaseCount setCount={setCount} />
    </div>
  );
}

const Count = memo(function () {
  return <div>1</div>;
});

const IncreaseCount = memo(function () {
  return (
    <div>
      <button onClick={() => setCount((c) => c + 1)}>IncreaseCount</button>
    </div>
  );
});

const DecreaseCount = memo(function () {
  return (
    <div>
      <button onClick={() => setCount((c) => c - 1)}>DecreaseCount</button>
    </div>
  );
});

export default App;